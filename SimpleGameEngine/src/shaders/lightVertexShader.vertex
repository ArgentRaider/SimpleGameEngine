#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out vec3 Normal;
out vec3 FragPos;
out vec2 TexCoords;
out vec3 TangentFragPos;
out vec3 TangentViewPos;
out mat3 TBN;

uniform bool useNormalMap;
uniform vec3 viewPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 normalModel;

void main(){
	gl_Position = projection * view * model  * vec4(aPos, 1.0);
	FragPos = vec3( model * vec4(aPos, 1.0) );
	Normal = mat3(normalModel) * aNormal;
	TexCoords = aTexCoords;

	if(useNormalMap){
		vec3 T = normalize( vec3( normalModel * vec4(aTangent, 0.0) ) );
		vec3 N = normalize( vec3( normalModel * vec4(aNormal, 0.0) ) );
		T = normalize(T - dot(T, N) * N);
		vec3 B = cross(N, T);
		TBN = transpose(mat3(T, B, N));
		TangentFragPos = TBN * FragPos;
		TangentViewPos = TBN * viewPos;
	}
	
}